#pragma once

#include "player.h"

class ServerPlayer : public Player {
   public:
    class ServerPlayer &operator=(class ServerPlayer const &) = delete;
    ServerPlayer(class ServerPlayer const &) = delete;
    ServerPlayer() = delete;

    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void _serverInitItemStackIds();
    virtual ~ServerPlayer();
    virtual bool isRuntimePredictedMovementEnabled() const;
    virtual void __unk_vfn_40();
    virtual void normalTick();
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_88();
    virtual void playerTouch(class Player &);
    virtual void __unk_vfn_95();
    virtual void __unk_vfn_98();
    virtual void __unk_vfn_105();
    virtual void __unk_vfn_107();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual class Actor *findAttackTarget();
    virtual bool isValidTarget(class Actor *) const;
    virtual void onTame();
    virtual void onFailedTame();
    virtual void vehicleLanded(class Vec3 const &, class Vec3 const &);
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    virtual void setOffhandSlot(class ItemStack const &);
    virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    virtual struct ActorUniqueID getSourceUniqueID() const;
    virtual bool canChangeDimensions() const;
    virtual void __unk_vfn_181();
    virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual void checkFallDamage(float, bool);
    virtual void handleFallDistanceOnServer(float, float, bool);
    virtual bool canPickupItem(class ItemStack const &) const;
    virtual bool canBePulledIntoVehicle() const;
    virtual void __unk_vfn_195();
    virtual void sendMotionPacketIfNeeded();
    virtual bool canSynchronizeNewEntity() const;
    virtual void onEffectAdded(class MobEffectInstance &);
    virtual void onEffectUpdated(class MobEffectInstance &);
    virtual void onEffectRemoved(class MobEffectInstance &);
    virtual void __unk_vfn_220();
    virtual void __unk_vfn_221();
    virtual bool canDestroyBlock(class Block const &) const;
    virtual void setAuxValue(int);
    virtual void __unk_vfn_246();
    virtual void __unk_vfn_249();
    virtual void die(class ActorDamageSource const &);
    virtual void __unk_vfn_261();
    virtual void __unk_vfn_269();
    virtual void __unk_vfn_278();
    virtual void knockback(class Actor *, int, float, float, float, float, float);
    virtual void spawnAnim();
    virtual void aiStep();
    virtual void __unk_vfn_307();
    virtual bool isAlliedTo(class Mob *);
    virtual void __unk_vfn_311();
    virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4> const &);
    virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    virtual void sendArmorDamage(class std::bitset<4> const &);
    virtual void sendArmor(class std::bitset<4> const &);
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual void onBorn(class Actor &, class Actor &);
    virtual float _getWalkTargetValue(class BlockPos const &);
    virtual bool canExistWhenDisallowMob() const;
    virtual void __unk_vfn_345();
    virtual void updateAi();
    virtual void _serverAiMobStep();
    virtual void __unk_vfn_359();
    virtual void prepareRegion(class ChunkSource &);
    virtual void destroyRegion();
    virtual void suspendRegion();
    virtual void resendAllChunks();
    virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    virtual void tickWorld(struct Tick const &);
    virtual void __unk_vfn_369();
    virtual void moveView();
    virtual void checkMovementStats(class Vec3 const &);
    virtual void __unk_vfn_374();
    virtual void __unk_vfn_375();
    virtual void __unk_vfn_377();
    virtual void __unk_vfn_378();
    virtual void setPermissions(enum CommandPermissionLevel);
    virtual void __unk_vfn_384();
    virtual void __unk_vfn_385();
    virtual void openTrading(struct ActorUniqueID const &, bool);
    virtual void __unk_vfn_388();
    virtual void __unk_vfn_389();
    virtual void openInventory();
    virtual void __unk_vfn_391();
    virtual void __unk_vfn_392();
    virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    virtual void stopSleepInBed(bool, bool);
    virtual void __unk_vfn_401();
    virtual void __unk_vfn_402();
    virtual bool isHostingPlayer() const;
    virtual bool isLoading() const;
    virtual bool isPlayerInitialized() const;
    virtual void __unk_vfn_406();
    virtual void setPlayerGameType(enum GameType);
    virtual void __unk_vfn_413();
    virtual void setContainerData(class IContainerManager &, int, int);
    virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    virtual void refreshContainer(class IContainerManager &);
    virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const &);
    virtual bool isActorRelevant(class Actor const &);
    virtual bool isTeacher() const;
    virtual void onSuspension();
    virtual void onLinkedSlotsChanged();
    virtual void sendInventoryTransaction(class InventoryTransaction const &) const;
    virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    virtual void sendNetworkPacket(class Packet &) const;
    virtual class PlayerEventCoordinator &getPlayerEventCoordinator();
    virtual class MoveInputHandler *getMoveInputHandler() const;
    virtual enum InputMode getInputMode() const;
    virtual enum ClientPlayMode getPlayMode() const;
    virtual void reportMovementTelemetry(enum MovementEventType);
    virtual void __unk_vfn_441();
    virtual int _getSpawnChunkLimit() const;
    virtual void _updateChunkPublisherView(class Vec3 const &, float);

    // ServerPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, unsigned char, class std::function<void(class ServerPlayer &)>, class mce::UUID, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    void checkCheating(class Vec3 const &);
    void disconnect();
    void doDeleteContainerManager(bool);
    class ItemStackNetManagerServer &getItemStackNetManagerServer();
    class ServerMoveInputHandler *getServerMoveInputHandler();
    void handleActorPickRequestOnServer(class Actor &, bool, bool);
    void handleBlockPickRequestOnServer(class BlockPos const &, bool);
    enum ContainerID openUnmanagedContainer();
    void postLoad(bool);
    void selectItem(class ItemStack const &);
    void sendMobEffectPackets();
    void setClientChunkRadius(unsigned int);
    void setInputMode(enum InputMode const &);
    void setLocalPlayerAsInitialized();
    void setPlayMode(enum ClientPlayMode const &);
    void setPlayerInput(float, float, bool, bool);
    void setSyncTimeIfClientServerPositionMatches(class Vec3 const &);
    void triggerRespawnFromCompletingTheEnd();
    static class ServerPlayer *tryGetFromEntity(class EntityContext &, bool);

    void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    enum ContainerID _nextContainerCounter();
    void _removeNearbyEntities();
    void _scanForNearbyActors();
    void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    void _updateNearbyActors();
};