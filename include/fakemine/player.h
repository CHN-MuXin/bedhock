#pragma once

#include <functional>

#include "SynchedActorData.h"
#include "mob.h"

class Player : public Mob {
   public:
    enum PositionMode : char {
        NORMAL,
        RESPAWN,
        TELEPORT,
        HEAD_ROTATION,
    };
    inline std::string const getName() {
        return this->getEntityData().getString(ActorDataKeys::NAMETAG);
    }
    class Player &operator=(class Player const &) = delete;
    Player(class Player const &) = delete;
    Player() = delete;

    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void _serverInitItemStackIds();
    virtual ~Player();
    virtual void resetUserPos(bool);
    virtual void remove();
    virtual bool isRuntimePredictedMovementEnabled() const;
    virtual class Vec3 getAttachPos(enum ActorLocation, float) const;
    virtual void move(class Vec3 const &);
    virtual void move(struct IActorMovementProxy &, class Vec3 const &) const;
    virtual void __unk_vfn_40();
    virtual void teleportTo(class Vec3 const &, bool, int, int);
    virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    virtual void normalTick();
    virtual void vehicleTick();
    virtual float getRidingHeight();
    virtual void __unk_vfn_61();
    virtual std::string getFormattedNameTag() const;
    virtual void __unk_vfn_68();
    virtual void setBlockMovementSlowdownMultiplier(class BlockLegacy const &, class Vec3 const &);
    virtual float getCameraOffset() const;
    virtual void __unk_vfn_82();
    virtual bool canInteractWithOtherEntitiesInGame() const;
    virtual void __unk_vfn_88();
    virtual void playerTouch(class Player &);
    virtual bool isImmobile() const;
    virtual void __unk_vfn_95();
    virtual bool isSleeping() const;
    virtual void setSleeping(bool);
    virtual void __unk_vfn_98();
    virtual bool isBlocking() const;
    virtual bool isDamageBlocked(class ActorDamageSource const &) const;
    virtual void __unk_vfn_105();
    virtual void __unk_vfn_107();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual class Actor *findAttackTarget();
    virtual bool isValidTarget(class Actor *) const;
    virtual bool attack(class Actor &, enum ActorDamageCause const &);
    virtual void onTame();
    virtual void onFailedTame();
    virtual bool isJumping() const;
    virtual void vehicleLanded(class Vec3 const &, class Vec3 const &);
    virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    virtual void onBounceStarted(class BlockPos const &, class Block const &);
    virtual void feed(int);
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual class HashedString const &getActorRendererId() const;
    virtual void awardKillScore(class Actor &, int);
    virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    virtual class ItemStack const &getCarriedItem() const;
    virtual void setCarriedItem(class ItemStack const &);
    virtual void setOffhandSlot(class ItemStack const &);
    virtual class ItemStack const &getEquippedTotem() const;
    virtual bool consumeTotem();
    virtual enum ActorType getEntityTypeId() const;
    virtual struct ActorUniqueID getSourceUniqueID() const;
    virtual bool canFreeze() const;
    virtual int getPortalCooldown() const;
    virtual int getPortalWaitTime() const;
    virtual bool canChangeDimensions() const;
    virtual void __unk_vfn_181();
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual void onSynchedDataUpdate(int);
    virtual bool canAddPassenger(class Actor &) const;
    virtual bool canPickupItem(class ItemStack const &) const;
    virtual bool canBePulledIntoVehicle() const;
    virtual void __unk_vfn_195();
    virtual void sendMotionPacketIfNeeded();
    virtual bool canSynchronizeNewEntity() const;
    virtual void startSwimming();
    virtual void stopSwimming();
    virtual enum CommandPermissionLevel getCommandPermissionLevel() const;
    virtual class AnimationComponent &getAnimationComponent();
    virtual void useItem(class ItemStackBase &, enum ItemUseMethod, bool);
    virtual void __unk_vfn_220();
    virtual void __unk_vfn_221();
    virtual float getMapDecorationRotation() const;
    virtual bool isWorldBuilder() const;
    virtual bool isCreative() const;
    virtual bool isAdventure() const;
    virtual bool isSurvival() const;
    virtual bool isSpectator() const;
    virtual bool add(class ItemStack &);
    virtual bool drop(class ItemStack const &, bool);
    virtual bool canDestroyBlock(class Block const &) const;
    virtual void setAuxValue(int);
    virtual void setSize(float, float);
    virtual void startSpinAttack();
    virtual void stopSpinAttack();
    virtual void __unk_vfn_246();
    virtual void __unk_vfn_249();
    virtual void die(class ActorDamageSource const &);
    virtual bool shouldDropDeathLoot() const;
    virtual void __unk_vfn_261();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    virtual void addAdditionalSaveData(class CompoundTag &);
    virtual void __unk_vfn_269();
    virtual void _onSizeUpdated();
    virtual void __unk_vfn_278();
    virtual void spawnAnim();
    virtual float getSpeed() const;
    virtual void setSpeed(float);
    virtual void travel(float, float, float);
    virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    virtual void aiStep();
    virtual void aiStep(struct IMobMovementProxy &) const;
    virtual int getItemUseDuration() const;
    virtual float getItemUseStartupProgress() const;
    virtual float getItemUseIntervalProgress() const;
    virtual void __unk_vfn_307();
    virtual bool isAlliedTo(class Mob *);
    virtual void __unk_vfn_311();
    virtual void sendArmorDamage(class std::bitset<4> const &);
    virtual std::vector<class ItemStack const *> getAllHand() const;
    virtual std::vector<class ItemStack const *> getAllEquipment() const;
    virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    virtual void dropEquipmentOnDeath();
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual void onBorn(class Actor &, class Actor &);
    virtual float _getWalkTargetValue(class BlockPos const &);
    virtual bool canExistWhenDisallowMob() const;
    virtual void __unk_vfn_345();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void jumpFromGround();
    virtual void jumpFromGround(struct IMobMovementProxy &) const;
    virtual void updateAi();
    virtual void _serverAiMobStep();
    virtual void updateGliding();
    virtual void __unk_vfn_359();
    virtual void prepareRegion(class ChunkSource &);
    virtual void destroyRegion();
    virtual void suspendRegion();
    virtual void resendAllChunks();
    virtual void _fireWillChangeDimension();
    virtual void _fireDimensionChanged();
    virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    virtual void tickWorld(struct Tick const &);
    virtual void __unk_vfn_369() = 0;
    virtual std::vector<class ChunkPos> const &getTickingOffsets() const;
    virtual void moveView();
    virtual void setName(std::string const &);
    virtual void checkMovementStats(class Vec3 const &);
    virtual void __unk_vfn_374();
    virtual void __unk_vfn_375();
    virtual void respawn();
    virtual void __unk_vfn_377();
    virtual void __unk_vfn_378();
    virtual bool hasResource(int);
    virtual void completeUsingItem();
    virtual void setPermissions(enum CommandPermissionLevel);
    virtual void startDestroying();
    virtual void stopDestroying();
    virtual void __unk_vfn_384();
    virtual void __unk_vfn_385();
    virtual void openTrading(struct ActorUniqueID const &, bool);
    virtual bool canOpenContainerScreen();
    virtual void __unk_vfn_388();
    virtual void __unk_vfn_389();
    virtual void openInventory();
    virtual void __unk_vfn_391();
    virtual void __unk_vfn_392();
    virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    virtual enum BedSleepingResult startSleepInBed(class BlockPos const &);
    virtual void stopSleepInBed(bool, bool);
    virtual bool canStartSleepInBed();
    virtual int getSleepTimer() const;
    virtual int getPreviousTickSleepTimer() const;
    virtual void __unk_vfn_401();
    virtual void __unk_vfn_402();
    virtual bool isHostingPlayer() const;
    virtual bool isLoading() const;
    virtual bool isPlayerInitialized() const;
    virtual void __unk_vfn_406();
    virtual void registerTrackedBoss(struct ActorUniqueID);
    virtual void unRegisterTrackedBoss(struct ActorUniqueID);
    virtual void setPlayerGameType(enum GameType);
    virtual void initHUDContainerManager();
    virtual void _crit(class Actor &);
    virtual class IMinecraftEventing *getEventing() const;
    virtual void __unk_vfn_413();
    virtual void sendEventPacket(class EventPacket &) const;
    virtual void addExperience(int);
    virtual void addLevels(int);
    virtual void setContainerData(class IContainerManager &, int, int) = 0;
    virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool) = 0;
    virtual void inventoryChanged(class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    virtual void refreshContainer(class IContainerManager &) = 0;
    virtual void deleteContainerManager();
    virtual void setFieldOfViewModifier(float);
    virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const &);
    virtual bool isActorRelevant(class Actor const &);
    virtual bool isTeacher() const = 0;
    virtual void onSuspension();
    virtual void onLinkedSlotsChanged();
    virtual void startCooldown(class Item const *, bool);
    virtual int getItemCooldownLeft(class HashedString const &) const;
    virtual int getItemCooldownLeft(unsigned __int64) const;
    virtual int getMaxItemCooldownLeft() const;
    virtual bool isItemOnCooldown(class HashedString const &) const;
    virtual void sendInventoryTransaction(class InventoryTransaction const &) const = 0;
    virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const = 0;
    virtual void sendNetworkPacket(class Packet &) const;
    virtual class PlayerEventCoordinator &getPlayerEventCoordinator() = 0;
    virtual class MoveInputHandler *getMoveInputHandler() const = 0;
    virtual enum InputMode getInputMode() const = 0;
    virtual enum ClientPlayMode getPlayMode() const = 0;
    virtual void reportMovementTelemetry(enum MovementEventType);
    virtual void __unk_vfn_441();
    virtual std::string getXuid() const;
    virtual struct PlayerMovementSettings const &getMovementSettings() const;
    virtual void onMovePlayerPacketNormal(class Vec3 const &, class Vec2 const &, float);
    virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource &);
};
