#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include "base.h"

class SynchedActorData;

class ActorRuntimeID {
   public:
    unsigned long long id;

    inline unsigned long long get() const {
        return id;
    }

    inline operator unsigned long long() const {
        return id;
    }
};

class Actor {
   public:
    enum class InitializationMethod;
    inline Vec3 getPos() {
        return getPosition();
    }
    inline Vec3 getPosOld() {
        return getPosPrev();
    }

    class Actor &operator=(class Actor const &) = delete;
    Actor(class Actor const &) = delete;
    Actor() = delete;

    virtual bool hasComponent(class HashedString const &) const;
    virtual class Mob *getLastHurtByMob();
    virtual void setLastHurtByMob(class Mob *);
    virtual class Player *getLastHurtByPlayer();
    virtual void setLastHurtByPlayer(class Player *);
    virtual class Mob *getLastHurtMob();
    virtual void setLastHurtMob(class Actor *);
    virtual void outOfWorld();
    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void reloadComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void _serverInitItemStackIds();
    virtual void _doInitialMove();
    virtual ~Actor();
    virtual void reset();
    virtual void resetUserPos(bool);
    virtual enum ActorType getOwnerEntityType();
    virtual void remove();
    virtual void setPos(class Vec3 const &);
    virtual bool isRuntimePredictedMovementEnabled() const;
    virtual struct PredictedMovementValues const &getPredictedMovementValues() const;
    virtual class Vec3 const &getPosition() const;
    virtual class Vec3 const &getPosPrev() const;
    virtual class Vec3 const getPosExtrapolated(float) const;
    virtual class Vec3 getAttachPos(enum ActorLocation, float) const;
    virtual class Vec3 getFiringPos() const;
    virtual void setRot(class Vec2 const &);
    virtual void move(class Vec3 const &);
    virtual void move(struct IActorMovementProxy &, class Vec3 const &) const;
    virtual class Vec3 getInterpolatedRidingPosition(float) const;
    virtual float getInterpolatedBodyRot(float) const;
    virtual float getInterpolatedHeadRot(float) const;
    virtual float getInterpolatedBodyYaw(float) const;
    virtual float getYawSpeedInDegreesPerSecond() const;
    virtual float getInterpolatedWalkAnimSpeed(float) const;
    virtual class Vec3 getInterpolatedRidingOffset(float) const;
    virtual void updateEntityInside(class AABB const &);
    virtual void updateEntityInside();
    virtual bool isFireImmune() const;
    virtual void __unk_vfn_40();
    virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    virtual bool canDisableShield();
    virtual void teleportTo(class Vec3 const &, bool, int, int);
    virtual bool tryTeleportTo(class Vec3 const &, bool, bool, int, int);
    virtual void chorusFruitTeleport(class Vec3 const &);
    virtual void lerpMotion(class Vec3 const &);
    virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    virtual void normalTick();
    virtual void baseTick();
    virtual void vehicleTick();
    virtual void positionPassenger(class Actor &, float);
    virtual float getRidingHeight();
    virtual bool startRiding(class Actor &);
    virtual void addPassenger(class Actor &);
    virtual void flagPassengerToRemove(class Actor &);
    virtual std::string getExitTip(std::string const &, enum InputMode) const;
    virtual bool intersects(class Vec3 const &, class Vec3 const &) const;
    virtual bool isInWall() const;
    virtual bool isInvisible() const;
    virtual bool canShowNameTag() const;
    virtual void __unk_vfn_61();
    virtual void setNameTagVisible(bool);
    virtual std::string const &getNameTag() const;
    virtual uint64_t getNameTagAsHash() const;
    virtual std::string getFormattedNameTag() const;
    virtual void filterFormattedNameTag(class UIProfanityContext const &);
    virtual void setNameTag(std::string const &);
    virtual void __unk_vfn_68();
    virtual void setScoreTag(std::string const &);
    virtual std::string const &getScoreTag() const;
    virtual bool isInWater() const;
    virtual bool hasEnteredWater() const;
    virtual bool isInLava() const;
    virtual bool isUnderLiquid(enum MaterialType) const;
    virtual bool isOverWater() const;
    virtual void setBlockMovementSlowdownMultiplier(class BlockLegacy const &, class Vec3 const &);
    virtual void resetBlockMovementSlowdownMultiplier();
    virtual float getCameraOffset() const;
    virtual float getShadowHeightOffs();
    virtual float getShadowRadius() const;
    virtual class Vec3 getHeadLookVector(float) const;
    virtual void __unk_vfn_82();
    virtual bool canSee(class Actor const &) const;
    virtual bool canSee(class Vec3 const &) const;
    virtual bool canInteractWithOtherEntitiesInGame() const;
    virtual bool isSkyLit(float);
    virtual float getBrightness(float) const;
    virtual void __unk_vfn_88();
    virtual void playerTouch(class Player &);
    virtual void onAboveBubbleColumn(bool);
    virtual void onInsideBubbleColumn(bool);
    virtual bool isImmobile() const;
    virtual bool isSilent();
    virtual bool isPickable();
    virtual void __unk_vfn_95();
    virtual bool isSleeping() const;
    virtual void setSleeping(bool);
    virtual void __unk_vfn_98();
    virtual void setSneaking(bool);
    virtual bool isBlocking() const;
    virtual bool isDamageBlocked(class ActorDamageSource const &) const;
    virtual bool isAlive() const;
    virtual bool isOnFire() const;
    virtual bool isOnHotBlock() const;
    virtual void __unk_vfn_105();
    virtual bool isSurfaceMob() const;
    virtual void __unk_vfn_107();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual bool isAffectedByWaterBottle() const;
    virtual bool canAttack(class Actor *, bool) const;
    virtual void setTarget(class Actor *);
    virtual class Actor *findAttackTarget();
    virtual bool isValidTarget(class Actor *) const;
    virtual bool attack(class Actor &, enum ActorDamageCause const &);
    virtual void performRangedAttack(class Actor &, float);
    virtual int getEquipmentCount() const;
    virtual void setOwner(struct ActorUniqueID);
    virtual void setSitting(bool);
    virtual void onTame();
    virtual void onFailedTame();
    virtual int getInventorySize() const;
    virtual int getEquipSlots() const;
    virtual int getChestSlots() const;
    virtual void setStanding(bool);
    virtual bool canPowerJump() const;
    virtual void setCanPowerJump(bool);
    virtual bool isJumping() const;
    virtual bool isEnchanted() const;
    virtual void vehicleLanded(class Vec3 const &, class Vec3 const &);
    virtual bool shouldRender() const;
    virtual void playAmbientSound();
    virtual enum LevelSoundEvent getAmbientSound() const;
    virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    virtual enum ActorDamageCause getBlockDamageCause(class Block const &) const;
    virtual void animateHurt();
    virtual bool doFireHurt(int);
    virtual void onLightningHit();
    virtual void onBounceStarted(class BlockPos const &, class Block const &);
    virtual void feed(int);
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual float getPickRadius();
    virtual class HashedString const &getActorRendererId() const;
    virtual class ItemActor *spawnAtLocation(int, int);
    virtual class ItemActor *spawnAtLocation(int, int, float);
    virtual class ItemActor *spawnAtLocation(class Block const &, int);
    virtual class ItemActor *spawnAtLocation(class Block const &, int, float);
    virtual class ItemActor *spawnAtLocation(class ItemStack const &, float);
    virtual void despawn();
    virtual void killed(class Actor &);
    virtual void awardKillScore(class Actor &, int);
    virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    virtual class ItemStack const &getArmor(enum ArmorSlot) const;
    virtual std::vector<class ItemStack const *> getAllArmor() const;
    virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    virtual class ItemStack const &getEquippedSlot(enum EquipmentSlot) const;
    virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const &);
    virtual class ItemStack const &getCarriedItem() const;
    virtual void setCarriedItem(class ItemStack const &);
    virtual void setOffhandSlot(class ItemStack const &);
    virtual class ItemStack const &getEquippedTotem() const;
    virtual bool consumeTotem();
    virtual bool save(class CompoundTag &);
    virtual void saveWithoutId(class CompoundTag &);
    virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    virtual void loadLinks(class CompoundTag const &, std::vector<struct ActorLink> &, class DataLoadHelper &);
    virtual enum ActorType getEntityTypeId() const;
    virtual class HashedString const &queryEntityRenderer() const;
    virtual struct ActorUniqueID getSourceUniqueID() const;
    virtual void thawFreezeEffect();
    virtual bool canFreeze() const;
    virtual bool const isWearingLeatherArmor() const;
    virtual class AABB getLiquidAABB(enum MaterialType) const;
    virtual void handleInsidePortal(class BlockPos const &);
    virtual int getPortalCooldown() const;
    virtual int getPortalWaitTime() const;
    virtual class AutomaticID<class Dimension, int> getDimensionId() const;
    virtual bool canChangeDimensions() const;
    virtual void __unk_vfn_181();
    virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual void checkFallDamage(float, bool);
    virtual void causeFallDamage(float, float, class ActorDamageSource);
    virtual void handleFallDistanceOnServer(float, float, bool);
    virtual void playSynchronizedSound(enum LevelSoundEvent, class Vec3 const &, class Block const &, bool);
    virtual void playSynchronizedSound(enum LevelSoundEvent, class Vec3 const &, int, bool);
    virtual void onSynchedFlagUpdate(int, int64_t, int64_t);
    virtual void onSynchedDataUpdate(int);
    virtual bool canAddPassenger(class Actor &) const;
    virtual bool canPickupItem(class ItemStack const &) const;
    virtual bool canBePulledIntoVehicle() const;
    virtual bool inCaravan() const;
    virtual void __unk_vfn_195();
    virtual void tickLeash();
    virtual void sendMotionPacketIfNeeded();
    virtual bool canSynchronizeNewEntity() const;
    virtual void stopRiding(bool, bool, bool);
    virtual void startSwimming();
    virtual void stopSwimming();
    virtual void buildDebugInfo(std::string &) const;
    virtual enum CommandPermissionLevel getCommandPermissionLevel() const;
    virtual bool isClientSide() const;
    virtual class AttributeInstance *getMutableAttribute(class Attribute const &);
    virtual class AttributeInstance const &getAttribute(class Attribute const &) const;
    virtual int getDeathTime() const;
    virtual void heal(int);
    virtual bool isInvertedHealAndHarm() const;
    virtual bool canBeAffected(int) const;
    virtual bool canBeAffected(class MobEffectInstance const &) const;
    virtual bool canBeAffectedByArrow(class MobEffectInstance const &) const;
    virtual void onEffectAdded(class MobEffectInstance &);
    virtual void onEffectUpdated(class MobEffectInstance &);
    virtual void onEffectRemoved(class MobEffectInstance &);
    virtual class AnimationComponent &getAnimationComponent();
    virtual void openContainerComponent(class Player &);
    virtual void swing();
    virtual void useItem(class ItemStackBase &, enum ItemUseMethod, bool);
    virtual void __unk_vfn_220();
    virtual void __unk_vfn_221();
    virtual void getDebugText(std::vector<std::string> &);
    virtual float getMapDecorationRotation() const;
    virtual float getPassengerYRotation(class Actor const &) const;
    virtual float getYHeadRot() const;
    virtual void setYHeadRot(float);
    virtual float getYHeadRotO() const;
    virtual bool isWorldBuilder() const;
    virtual bool isCreative() const;
    virtual bool isAdventure() const;
    virtual bool isSurvival() const;
    virtual bool isSpectator() const;
    virtual bool isAttackableGamemode() const;
    virtual bool add(class ItemStack &);
    virtual bool drop(class ItemStack const &, bool);
    virtual bool getInteraction(class Player &, class ActorInteraction &, class Vec3 const &);
    virtual bool canDestroyBlock(class Block const &) const;
    virtual void setAuxValue(int);
    virtual void setSize(float, float);
    virtual void onOrphan();
    virtual void wobble();
    virtual bool wasHurt();
    virtual void startSpinAttack();
    virtual void stopSpinAttack();
    virtual void setDamageNearbyMobs(bool);
    virtual void __unk_vfn_246();
    virtual void reloadLootTable();
    virtual void reloadLootTable(struct EquipmentTableDefinition const &);
    virtual void __unk_vfn_249();
    virtual void kill();
    virtual void die(class ActorDamageSource const &);
    virtual bool shouldDropDeathLoot() const;
    virtual bool shouldTick() const;
    virtual void extractSnapshot(struct PlayerSnapshotComponent &) const;
    virtual void applySnapshot(struct PlayerSnapshotComponent const &, struct PlayerSnapshotComponent const &);
    virtual float getNextStep(float);
    virtual class LootTable *getLootTable();
    virtual void interpolatorTick();
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    virtual bool shouldTryMakeStepSound();
    virtual void __unk_vfn_261();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void markHurt();
    virtual class AnimationComponent &_getAnimationComponent(class std::shared_ptr<class AnimationComponent> &, enum AnimationComponentGroup);
    virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    virtual void addAdditionalSaveData(class CompoundTag &);
    virtual void _playStepSound(class BlockPos const &, class Block const &);
    virtual void _playFlySound(class BlockPos const &, class Block const &);
    virtual void __unk_vfn_269();
    virtual void checkInsideBlocks(float);
    virtual void pushOutOfBlocks(class Vec3 const &);
    virtual bool updateWaterState();
    virtual void doWaterSplashEffect();
    virtual void spawnTrailBubbles();
    virtual void updateInsideBlock();
    virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    virtual void _onSizeUpdated();
    Actor(class ILevel &, class EntityContext &);
    Actor(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    Vec3 _randomHeartPos();
    void _sendDirtyActorData();
    void _setActorTypeId(enum ActorType);
    void _setLevelPtr(class Level *);
    void addDefinitionGroup(std::string const &);
    void addEffect(class MobEffectInstance const &);
    bool addTag(std::string const &);
    void buildDebugGroupInfo(std::string &) const;
    Vec3 buildForward() const;
    void burn(int, bool);
    void cacheComponentData();
    Vec3 calcCenterPos() const;
    float calculateAttackDamage(class Actor &);
    bool canAscendCurrentBlockByJumping() const;
    bool canBeginOrContinueClimbingLadder() const;
    bool canCurrentlySwim() const;
    bool canDescendBlockBelowByCrouching() const;
    bool canFly() const;
    bool canMate(class Actor const &) const;
    bool canSeeDaylight() const;
    void celebrateHunt(int, bool);
    void checkForPropertyUpdate();
    void clearFishingHookID();
    bool closerThan(class Actor const &, float) const;
    void consumeItem(class ItemActor &, int);
    UpdateEquipPacket createUpdateEquipPacket(int);
    UpdateTradePacket createUpdateTradePacket(int);
    bool damageSensorComponentHurt(float &, class ActorDamageSource const &, bool);
    void deregisterTagsFromLevelCache();
    float distanceSqrToBlockPosCenter(class BlockPos const &) const;
    float distanceTo(class Actor const &) const;
    float distanceTo(class Vec3 const &) const;
    float distanceToSqr(class Actor const &) const;
    float distanceToSqr(class Vec3 const &) const;
    void dropLeash(bool, bool);
    void dropTowards(class ItemStack const &, class Vec3);
    bool executeEvent(std::string const &, class VariantParameterList const &);
    // void exitVehicle(class Actor const &, class std::optional<class Vec3> ( *)(struct VehicleUtils::VehicleDirections const &, class std::function<bool (class Vec3 const &, class Vec3 const &)>));
    // FishingHook * fetchFishingHook();
    std::vector<struct DistanceSortedActor> fetchNearbyActorsSorted(class Vec3 const &, enum ActorType);
    std::vector<struct DistanceSortedActor> fetchNearbyAttackableActorsSorted(class Vec3 const &, enum ActorType);
    // void forEachLeashedActor(class std::function<void (class gsl::not_null<class Actor *>)>);
    // AABB const &getAABB() const;
    // Vec2 const &getAABBDim() const;
    // int getActiveEffectCount() const;
    // ActorDefinitionIdentifier const &getActorIdentifier() const;
    // std::vector<class MobEffectInstance> const &getAllEffects() const;
    // SimpleContainer & getArmorContainer();
    // SimpleContainer const & getArmorContainer() const;
    // gsl::not_null<class BaseAttributeMap *> getAttributes();
    // BlockPos getBlockPosCurrentlyStandingOn(class Actor *) const;
    // BlockPos getBlockTarget() const;
    // bool getCanPickupItems() const;
    // ItemStack const &getCarriedItemInSlotPreferredBy(class ItemStack const &) const;
    // bool getChainedDamageEffects() const;
    // bool getCollidableMobNear();
    // enum PaletteColor getColor() const;
    // enum PaletteColor getColor2() const;
    // int getControllingSeat();
    // float getCurrentSwimAmount() const;
    // bool getDamageNearbyMobs() const;
    // ActorDefinitionDiffList * getDiffList();
    // Dimension & getDimension() const;
    // Dimension const & getDimensionConst() const;
    // EconomyTradeableComponent * getEconomyTradeableComponent() const;
    // MobEffectInstance const * getEffect(class MobEffect const &) const;
    SynchedActorData & getEntityData();
    SynchedActorData const & getEntityData() const;
    // ActorTerrainInterlockData & getEntityTerrainInterlockData();
    enum EquipmentSlot getEquipmentSlotForItem(class ItemStack const &) const;
    bool getFirstAvailableSeatPos(class Actor &, class Vec3 &) const;
    Actor *getFirstPassenger() const;
    // SimpleContainer & getHandContainer();
    // SimpleContainer const & getHandContainer() const;
    int getHealth() const;
    int getHurtDir() const;
    int getHurtTime() const;
    enum Actor::InitializationMethod getInitializationMethod();
    Vec3 getInterpolatedPosition(float) const;
    Vec2 getInterpolatedRotation(float) const;
    bool getIsExperienceDropEnabled() const;
    int getJumpDuration() const;
    int getLastHurtByMobTime();
    int getLastHurtByMobTimestamp();
    enum ActorDamageCause getLastHurtCause() const;
    float getLastHurtDamage() const;
    int getLastHurtMobTimestamp();
    uint64_t getLastHurtTimestamp() const;
    ActorUniqueID getLeashHolder() const;
    Level const &getLevel() const;
    Level &getLevel();
    int getLimitedLifetimeTicks() const;
    std::vector<struct ActorLink> getLinks() const;
    int getMarkVariant() const;
    int getMaxHealth() const;
    // MolangVariableMap & getMolangVariables();
    // gsl::not_null<class std::shared_ptr<struct IActorMovementProxy>> getMovementProxy();
    // gsl::not_null<class std::shared_ptr<struct IActorMovementProxy const>> getMovementProxy() const;
    ItemStack const &getOffhandSlot() const;
    int getOnDeathExperience();
    Mob *getOwner() const;
    ActorUniqueID const getOwnerId() const;
    int getPassengerIndex(class Actor const &) const;
    std::unique_ptr<class CompoundTag> getPersistingTradeOffers();
    int getPersistingTradeRiches();
    Player *getPlayerOwner() const;
    enum PortalAxis getPortalEntranceAxis() const;
    Vec3 const &getPosDelta() const;
    Vec3 &getPosDeltaNonConst();
    float getRadius() const;
    // Random & getRandom() const;
    // BlockSource & getRegion() const;
    // BlockSource const & getRegionConst() const;
    RenderParams &getRenderParams();
    Vec2 getRotation() const;
    ActorRuntimeID getRuntimeID() const;
    int getShakeTime() const;
    int getSkinID() const;
    // SpatialActorNetworkData & getSpatialNetworkData();
    // SpatialActorNetworkData const & getSpatialNetworkData() const;
    float getSpeedInMetersPerSecond() const;
    bool getStatusFlag(enum ActorFlags) const;
    int getStrength() const;
    int getStrengthMax() const;
    int getStructuralIntegrity() const;
    float getSwimAmount(float) const;
    // gsl::span<std::string, -1> const getTags() const;
    Actor *getTarget() const;
    ActorUniqueID getTargetId() const;
    bool getTradeInterest() const;
    // MerchantRecipeList * getTradeOffers();
    Player *getTradingPlayer() const;
    ActorUniqueID const &getUniqueID() const;
    int getVariant() const;
    Actor *getVehicle() const;
    Actor *getVehicleRoot() const;
    ActorRuntimeID getVehicleRuntimeID() const;
    float getVerticalSpeedInMetersPerSecond() const;
    Vec3 getViewVector(float) const;
    bool hasAnyEffects() const;
    bool hasAnyVisibleEffects() const;
    bool hasBeenHurtByMobInLastTicks(int) const;
    bool hasCategory(enum ActorCategory) const;
    bool hasDefinitionGroup(std::string const &) const;
    bool hasDimension() const;
    bool hasEffect(class MobEffect const &) const;
    bool hasFamily(class HashedString const &) const;
    bool hasFishingHook() const;
    bool hasLevel() const;
    bool hasPassenger() const;
    bool hasPersistingTrade() const;
    bool hasPlayerPassenger() const;
    bool hasPriorityAmmunition() const;
    bool hasRuntimeID() const;
    bool hasSaddle() const;
    bool hasTag(std::string const &) const;
    bool hasTags() const;
    bool hasTeleported() const;
    bool hasTickingArea() const;
    bool hasTotemEquipped() const;
    bool hasType(enum ActorType) const;
    bool hasUniqueID() const;
    void healEffects(int);
    bool hurt(class ActorDamageSource const &, float, bool, bool);
    bool inDownwardFlowingLiquid() const;
    void initActorProperties();
    void initParams(class RenderParams &);
    void initParams(class VariantParameterList &);
    bool isActorLocationInMaterial(enum ActorLocation, enum MaterialType) const;
    bool isAngry() const;
    bool isAutonomous() const;
    bool isBaby() const;
    bool isBreakingObstruction() const;
    bool isBribed() const;
    bool isCharged() const;
    bool isChested() const;
    bool isClimbing() const;
    bool isControlledByLocalInstance() const;
    bool isDoorBreaker() const;
    bool isDoorOpener() const;
    bool isGlobal() const;
    bool isIgnited() const;
    bool isImmersedInWater() const;
    bool isInClouds() const;
    bool isInContactWithWater() const;
    bool isInLove() const;
    bool isInPrecipitation() const;
    bool isInRain() const;
    bool isInScaffolding() const;
    bool isInSnow() const;
    bool isInThunderstorm() const;
    bool isInWaterOrRain() const;
    bool isInWorld() const;
    bool isInsideBorderBlock(float) const;
    bool isInsidePortal() const;
    bool isLayingDown() const;
    bool isLeashed() const;
    bool isMovedToLimbo() const;
    bool isMovedToUnloadedChunk() const;
    bool isMoving() const;
    bool isOrphan() const;
    bool isOutOfControl() const;
    bool isOverScaffolding() const;
    bool isPacified() const;
    bool isPassenger(struct ActorUniqueID const &) const;
    bool isPassenger(class Actor const &) const;
    bool isPersistent() const;
    bool isPlayingDead() const;
    bool isPowered() const;
    bool isRegionValid() const;
    bool isRemoved() const;
    bool isResting() const;
    bool isRiding(class Actor *) const;
    bool isRiding() const;
    bool isSafeToSleepNear() const;
    bool isSheared() const;
    bool isSitting() const;
    bool isSneaking() const;
    bool isSoulSpeedEnchantActive() const;
    bool isStackable() const;
    bool isStanding() const;
    bool isSwimmer() const;
    bool isSwimming() const;
    bool isTame() const;
    bool isTickingEntity() const;
    bool isTouchingDamageBlock() const;
    bool isTrading() const;
    bool isTrusting() const;
    bool isType(enum ActorType) const;
    bool isUseNewTradeScreen() const;
    bool isWASDControlled();
    bool isWalker() const;
    void lerpTo(class Vec3 const &, class Vec2 const &, int);
    void lerpTo(class Vec3 const &, class Vec2 const &, float, int);
    void lerpToRotation(class Vec2 const &, int);
    void loadEntityFlags(class CompoundTag const &, class DataLoadHelper &);
    ActorUniqueID const &lovePartnerId() const;
    void migrateUniqueID(struct ActorUniqueID);
    void moveBBs(class Vec3 const &);
    void moveRelative(float, float, float, float);
    void moveTo(class Vec3 const &, class Vec2 const &);
    void onAffectedByWaterBottle();
    bool onClimbableBlock() const;
    bool onHoverableBlock() const;
    void onOnewayCollision(class AABB const &);
    bool operator==(class Actor &);
    void pickUpItem(class ItemActor &, int);
    void playSound(enum LevelSoundEvent, class Vec3 const &, class Block const &);
    void playSound(enum LevelSoundEvent, class Vec3 const &, int);
    void positionAllPassengers();
    bool pullInEntity(class Actor &);
    void pushBackActionEventToActionQueue(class ActionEvent);
    void refreshComponents();
    void reload();
    void removeAllEffects();
    void removeAllPassengers(bool, bool);
    void removeEffect(int);
    void removeEffectParticles();
    void removePersistingTrade();
    bool removeTag(std::string const &);
    void resetClientAnimations();
    void resetRegion();
    void saveEntityFlags(class CompoundTag &);
    std::unique_ptr<class ListTag> saveLinks() const;
    void savePersistingTrade(std::unique_ptr<class CompoundTag>, int);
    void sendActorDefinitionEventTriggered(std::string const &);
    void sendMotionToServer();
    void serializationSetHealth(int);
    void setAABB(class AABB const &);
    void setAABBDim(class Vec2 const &);
    void setActorRendererId(class HashedString);
    void setAutonomous(bool);
    void setBaseDefinition(struct ActorDefinitionIdentifier const &, bool, bool);
    void setBlockTarget(class BlockPos const &);
    void setBreakingObstruction(bool);
    void setCanClimb(bool);
    void setCanFly(bool);
    void setChainedDamageEffects(bool);
    void setCharged(bool);
    void setClimbing(bool);
    void setCollidableMob(bool);
    void setCollidableMobNear(bool);
    void setColor(enum PaletteColor);
    void setColor2(enum PaletteColor);
    void setControllingSeat(int);
    void setDancing(bool);
    void setDoorBreaker(bool);
    void setDoorOpener(bool);
    void setEnchanted(bool);
    void setFishingHookID(struct ActorUniqueID);
    void setGlobal(bool);
    void setHurtDir(int);
    void setHurtTime(int);
    void setInLove(class Actor *);
    void setInterpolation(bool);
    void setInvisible(bool);
    void setIsExperienceDropEnabled(bool);
    void setJumpDuration(int);
    void setLastHitBB(class Vec3 const &, class Vec3 const &);
    void setLayingDown(bool);
    void setLeashHolder(struct ActorUniqueID);
    void setLimitedLifetimeTicks(int);
    void setMarkVariant(int);
    void setMovedToLimbo(bool);
    void setMovedToUnloadedChunk(bool);
    void setMoving(bool);
    void setPersistent();
    void setPosDelta(class Vec3 const &);
    void setPosDirectLegacy(class Vec3 const &);
    void setPosPrev(class Vec3 const &);
    void setPreviousPosRot(class Vec3 const &, class Vec2 const &);
    void setRegion(class BlockSource &);
    void setResting(bool);
    void setRuntimeID(class ActorRuntimeID);
    void setSaddle(bool);
    void setScared(bool);
    void setSeatDescription(class Vec3 const &, struct SeatDescription const &);
    void setShakeTime(int);
    void setSkinID(int);
    void setStatusFlag(enum ActorFlags, bool);
    void setStrength(int);
    void setStrengthMax(int);
    void setStructuralIntegrity(int);
    void setStunned(bool);
    void setSwimmer(bool);
    void setTempted(bool);
    void setTradeInterest(bool);
    void setTradingPlayer(class Player *);
    void setUniqueID(struct ActorUniqueID);
    void setVariant(int);
    void setVelocity(class Vec3 const &);
    void setWASDControlled(bool);
    void setWalker(bool);
    bool shouldOrphan(class BlockSource &);
    bool shouldUpdateEffects() const;
    void spawnBalloonPopParticles();
    void spawnDeathParticles();
    void spawnDustParticles(int);
    void spawnEatParticles(class ItemStack const &, int);
    void spawnTamingParticles(bool);
    void teleportPassengersTo(class Vec3 const &, int, int);
    void testForEntityStacking(class BlockSource &, class AABB const &, std::vector<class AABB> &);
    bool tick(class BlockSource &);
    void transferTickingArea(class Dimension &);
    std::vector<class ItemDescriptor> const *tryGetEquippableSlotAllowedItems(int) const;
    bool tryMoveChunks();
    void updateAnimationComponentOnServer();
    void updateBBFromDefinition();
    void updateDescription();
    void updateInvisibilityStatus();
    void updateMolangVariables(class RenderParams &);
    void updateTickingData();
    bool useSaddle(class ItemStackBase &, class Player *);
    bool wasLastHitByPlayer();
    bool wasLoadedFromNBTThisFrame() const;
    static float const DEFAULT_AMBIENT_SOUND_INTERVAL;
    static float const DEFAULT_AMBIENT_SOUND_INTERVAL_RANGE;
    static float const DEFAULT_MOVEMENT_SOUND_DISTANCE_OFFSET;
    static class Vec3 const LAVA_AABB_SHRINK_AMOUNT;
    static float const LAVA_FLOW_STRENGTH_MULTIPLIER;
    static int const MAX_BYTE_CHARGE_AMOUNT;
    static int const PLAYER_HURT_EXPERIENCE_TIME;
    static std::string const RIDING_TAG;
    static int const TOTAL_AIR_SUPPLY;
    static class Vec3 const WATER_AABB_SHRINK_AMOUNT;
    static float const WATER_FLOW_STRENGTH_MULTIPLIER;
    static void _move(struct IActorMovementProxy &, class Vec3 const &);
    static class Vec3 buildForward(struct IActorMovementProxy const &);
    static bool canBeginOrContinueClimbingLadder(struct IActorMovementProxy const &);
    static void checkEntityOnewayCollision(class BlockSource &, class BlockPos const &);
    static class BlockPos getBlockPosCurrentlyStandingOn(struct IActorMovementProxy const &, struct IActorMovementProxy *);
    static class Vec2 getInterpolatedRotation(class Vec2 const &, class Vec2 const &, float);
    static class AABB getLiquidAABB(class AABB const &, enum MaterialType);
    static float getLiquidFlowStrength(enum MaterialType);
    static bool getStatusFlag(class SynchedActorData const &, enum ActorFlags);
    static class Vec3 getViewVector(struct IActorMovementProxy const &, float);
    static class Vec3 getViewVector(class Vec2 const &, class Vec2 const &, float);
    static bool hasSubBBIn(struct IActorMovementProxy const &, enum MaterialType);
    static bool isFree(struct IActorMovementProxy &, class Vec3 const &, float);
    static bool isImmersedInWater(struct IActorMovementProxy const &);
    static bool isImmobile(struct IActorMovementProxy const &);
    static bool isInScaffolding(struct IActorMovementProxy const &);
    static bool isSitting(struct IActorMovementProxy const &);
    static bool isStanding(struct IActorMovementProxy const &);
    static void moveRelative(struct IActorMovementProxy &, float, float, float, float);
    static bool onClimbableBlock(struct IActorMovementProxy const &);
    static void setStatusFlag(class SynchedActorData &, enum ActorFlags, bool);
    static void testForCollidableMobs(struct IActorMovementProxy const &, class BlockSource &, class AABB const &, std::vector<class AABB> &);
    static class Actor *tryGetFromComponent(class ActorOwnerComponent &, bool);
    static class Actor const *tryGetFromComponent(class ActorOwnerComponent const &, bool);
    static class Actor *tryGetFromEntity(class EntityContext &, bool);
    // static class Actor * tryGetFromEntity(class StackRefResultT<struct EntityRefTraits>, bool);

   protected:
    // void _assignActorMovementProxy(class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy>>);
    ItemActor const *_drop(class ItemStack const &, bool);
    bool _isHeadInWater() const;
    void _playMovementSound(bool);
    void _refreshAABB();
    void _setArmorContainer(std::unique_ptr<class SimpleContainer>);
    void _setHandContainer(std::unique_ptr<class SimpleContainer>);
    void _setHeightOffset(float);
    void _setNetherPortalData(class AutomaticID<class Dimension, int>, class AutomaticID<class Dimension, int>, int);
    void _setPos(class Vec3 const &);
    void _setPosPrev(class Vec3 const &);
    void enableAutoSendPosRot(bool);
    static bool _isImmersedInWater(class Vec3 const &, class BlockSource const &, class Vec2 const &);
    static class Block const &getBlockWhenClimbing(struct IActorMovementProxy const &);

   private:
    void _defaultInitEquipmentDropChances();
    void _initAliasProperties();
    void _initializeLeashRopeSystem(class Actor *);
    bool _isItemStackNetManagerEnabled() const;
    void _managePassengers(class BlockSource &);
    void _moveHitboxTo(class Vec3 const &);
    void _sendLinkPacket(struct ActorLink const &) const;
    void _serializeComponents(class CompoundTag &);
    void _setupServerAnimationComponent();
    void _spawnPukeParticles();
    void _spawnTreasureHuntingParticles();
    bool _tryPlaceAt(class Vec3 const &, class AABB const &);
    void _tryPlantWitherRose();
    void _updateComposition(bool);
    void _updateOwnerChunk();
    static int const DAMAGE_NEARBY_MOBS_DURATION;
    static float const DEFAULT_MAX_DISTANCE_OPTIMIZATION;
    static uint64_t const DEFAULT_MAX_TICK_DELAY_OPTIMIZATION;
    static bool _containsSneakCollisionShapes(struct IActorMovementProxy &, class AABB const &);
};
