#pragma once

#include <bitset>

#include "actor.h"

enum class MobSpawnMethod;
enum class TravelType;

class Mob : public Actor {
   public:
    struct JumpPreventionResult {
        JumpPreventionResult() = delete;
        JumpPreventionResult(JumpPreventionResult const &) = delete;
        JumpPreventionResult(JumpPreventionResult const &&) = delete;
    };

    bool refreshInventory();
    class Mob &operator=(class Mob const &) = delete;
    Mob(class Mob const &) = delete;
    Mob() = delete;
    virtual bool hasComponent(class HashedString const &) const;
    virtual void outOfWorld();
    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void _doInitialMove();
    virtual ~Mob();
    virtual void resetUserPos(bool);
    virtual bool isRuntimePredictedMovementEnabled() const;
    virtual float getInterpolatedBodyRot(float) const;
    virtual float getInterpolatedHeadRot(float) const;
    virtual float getInterpolatedBodyYaw(float) const;
    virtual float getYawSpeedInDegreesPerSecond() const;
    virtual void __unk_vfn_40();
    virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    virtual void teleportTo(class Vec3 const &, bool, int, int);
    virtual void normalTick();
    virtual void baseTick();
    virtual void vehicleTick();
    virtual bool startRiding(class Actor &);
    virtual void addPassenger(class Actor &);
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual float getCameraOffset() const;
    virtual void __unk_vfn_82();
    virtual bool canInteractWithOtherEntitiesInGame() const;
    virtual void __unk_vfn_88();
    virtual void playerTouch(class Player &);
    virtual bool isImmobile() const;
    virtual bool isPickable();
    virtual void __unk_vfn_95();
    virtual bool isSleeping() const;
    virtual void setSleeping(bool);
    virtual void __unk_vfn_98();
    virtual bool isBlocking() const;
    virtual bool isDamageBlocked(class ActorDamageSource const &) const;
    virtual bool isAlive() const;
    virtual void __unk_vfn_105();
    virtual bool isSurfaceMob() const;
    virtual void __unk_vfn_107();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void setTarget(class Actor *);
    virtual class Actor *findAttackTarget();
    virtual bool isValidTarget(class Actor *) const;
    virtual bool attack(class Actor &, enum ActorDamageCause const &);
    virtual void onTame();
    virtual void onFailedTame();
    virtual bool canPowerJump() const;
    virtual bool isJumping() const;
    virtual void vehicleLanded(class Vec3 const &, class Vec3 const &);
    virtual enum ActorDamageCause getBlockDamageCause(class Block const &) const;
    virtual void animateHurt();
    virtual bool doFireHurt(int);
    virtual void onBounceStarted(class BlockPos const &, class Block const &);
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual void awardKillScore(class Actor &, int);
    virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const &);
    virtual struct ActorUniqueID getSourceUniqueID() const;
    virtual bool canFreeze() const;
    virtual int getPortalWaitTime() const;
    virtual bool canChangeDimensions() const;
    virtual void __unk_vfn_181();
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual void causeFallDamage(float, float, class ActorDamageSource);
    virtual bool canPickupItem(class ItemStack const &) const;
    virtual bool canBePulledIntoVehicle() const;
    virtual bool inCaravan() const;
    virtual void __unk_vfn_195();
    virtual bool canSynchronizeNewEntity() const;
    virtual void stopRiding(bool, bool, bool);
    virtual void buildDebugInfo(std::string &) const;
    virtual int getDeathTime() const;
    virtual void swing();
    virtual void __unk_vfn_220();
    virtual void __unk_vfn_221();
    virtual float getYHeadRot() const;
    virtual void setYHeadRot(float);
    virtual float getYHeadRotO() const;
    virtual bool isWorldBuilder() const;
    virtual bool isCreative() const;
    virtual bool isAdventure() const;
    virtual bool isSurvival() const;
    virtual bool isSpectator() const;
    virtual bool canDestroyBlock(class Block const &) const;
    virtual void setAuxValue(int);
    virtual void stopSpinAttack();
    virtual void __unk_vfn_246();
    virtual void __unk_vfn_249();
    virtual void kill();
    virtual void die(class ActorDamageSource const &);
    virtual bool shouldDropDeathLoot() const;
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    virtual void __unk_vfn_261();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    virtual void addAdditionalSaveData(class CompoundTag &);
    virtual void _playStepSound(class BlockPos const &, class Block const &);
    virtual void __unk_vfn_269();
    virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    virtual void _onSizeUpdated();
    virtual void __unk_vfn_278();
    virtual void knockback(class Actor *, int, float, float, float, float, float);
    virtual void spawnAnim();
    virtual void setSprinting(bool);
    virtual enum LevelSoundEvent getHurtSound();
    virtual enum LevelSoundEvent getDeathSound();
    virtual struct TextureUVCoordinateSet const *getItemInHandIcon(class ItemStack const &, int);
    virtual float getSpeed() const;
    virtual void setSpeed(float);
    virtual float getJumpPower() const;
    virtual void hurtEffects(class ActorDamageSource const &, float, bool, bool);
    virtual float getMeleeWeaponDamageBonus(class Mob *);
    virtual int getMeleeKnockbackBonus();
    virtual void travel(float, float, float);
    virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    virtual void applyFinalFriction(float, bool);
    virtual void aiStep();
    virtual void aiStep(struct IMobMovementProxy &) const;
    virtual void pushActors();
    virtual void lookAt(class Actor *, float, float);
    virtual bool isLookingAtAnEntity();
    virtual bool checkSpawnRules(bool);
    virtual bool checkSpawnObstruction() const;
    virtual float getAttackAnim(float);
    virtual int getItemUseDuration() const;
    virtual float getItemUseStartupProgress() const;
    virtual float getItemUseIntervalProgress() const;
    virtual int getItemUseIntervalAxis() const;
    virtual int getTimeAlongSwing() const;
    virtual void __unk_vfn_307();
    virtual float getMaxHeadXRot();
    virtual bool isAlliedTo(class Mob *);
    virtual bool doHurtTarget(class Actor *, enum ActorDamageCause const &);
    virtual void __unk_vfn_311();
    virtual void leaveCaravan();
    virtual void joinCaravan(class Mob *);
    virtual bool hasCaravanTail() const;
    virtual struct ActorUniqueID getCaravanHead() const;
    virtual int getArmorValue() const;
    virtual float getArmorCoverPercentage() const;
    virtual int getToughnessValue() const;
    virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4> const &);
    virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    virtual void sendArmorDamage(class std::bitset<4> const &);
    virtual void sendArmor(class std::bitset<4> const &);
    virtual void containerChanged(int);
    virtual void updateEquipment();
    virtual int clearEquipment();
    virtual std::vector<int> getAllArmorID() const;
    virtual std::vector<class ItemStack const *> getAllHand() const;
    virtual std::vector<class ItemStack const *> getAllEquipment() const;
    virtual int getArmorTypeHash();
    virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    virtual void dropEquipmentOnDeath();
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual float getDamageAfterEnchantReduction(class ActorDamageSource const &, float) const;
    virtual float getDamageAfterArmorReduction(class ActorDamageSource const &, float) const;
    virtual float getDamageAfterResistanceEffect(class ActorDamageSource const &, float) const;
    virtual bool createAIGoals();
    virtual void onBorn(class Actor &, class Actor &);
    virtual bool setItemSlot(enum EquipmentSlot, class ItemStack const &);
    virtual void setTransitioningSitting(bool);
    virtual void attackAnimation(class Actor *, float);
    virtual int getAttackTime();
    virtual float _getWalkTargetValue(class BlockPos const &);
    virtual bool canExistWhenDisallowMob() const;
    virtual void __unk_vfn_345();
    virtual void ascendLadder();
    virtual void ascendBlockByJumping();
    virtual void descendBlockByCrouching();
    virtual void dropContainer();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void jumpFromGround();
    virtual void jumpFromGround(struct IMobMovementProxy &) const;
    virtual void updateAi();
    virtual void newServerAiStep();
    virtual void _serverAiMobStep();
    virtual void dropBags();
    virtual void tickDeath();
    virtual void updateGliding();
    virtual void __unk_vfn_359();
    virtual class AABB _getAdjustedAABBForSpawnCheck(class AABB const &, class Vec3 const &) const;

    Mob(class Level &, class EntityContext &);
    Mob(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    void _endJump();
    // void addSpeedModifier(class mce::UUID const &, std::string const &, float);
    float calcMoveRelativeSpeed(enum TravelType);
    bool checkForPostHitDamageImmunity(float, class ActorDamageSource const &);
    bool checkTotemDeathProtection(class ActorDamageSource const &);
    void createAI(std::vector<struct GoalDefinition>);
    bool discardFriction() const;
    void emitJumpPreventedEvent(class BlockPos const &);
    void frostWalk();
    class BlockPos getBoundOrigin() const;
    int getCaravanSize() const;
    int getEatCounter() const;
    class Mob *getFirstCaravanHead();
    float getFlightSpeed() const;
    float getFrictionModifier() const;
    int getGlidingTicks() const;
    class ItemStack const &getItemSlot(enum EquipmentSlot) const;
    float getJumpEffectAmplifierValue();
    float getJumpMultiplier();
    struct JumpPreventionResult getJumpPrevention();
    float getMovementComponentCurrentSpeed() const;
    int getNoActionTime() const;
    float getPassengerLockedBodyRot() const;
    float getPassengerRotLimit() const;
    int getRollCounter() const;
    float getSwimSpeedMultiplier() const;
    struct ActorUniqueID getTargetCaptain() const;
    enum TravelType getTravelType();
    float getYRotA() const;
    float getZza() const;
    bool hasBoundOrigin() const;
    void hurtArmor(class ActorDamageSource const &, int);
    bool isAbleToMove() const;
    bool isEating() const;
    bool isFrostWalking() const;
    bool isGliding() const;
    bool isLayingEgg() const;
    bool isPregnant() const;
    bool isRolling() const;
    bool isSprinting() const;
    bool isTransitioningSitting() const;
    void onPlayerDimensionChanged(class Player *, class AutomaticID<class Dimension, int>);
    void onPlayerJump(int);
    // void removeSpeedModifier(class mce::UUID const &);
    void resetAttributes();
    void resetNoActionTime();
    void sendArmorDamageSlot(enum ArmorSlot);
    void sendArmorSlot(enum ArmorSlot);
    void setEatCounter(int);
    void setEating(bool);
    void setFlightSpeed(float);
    void setFrictionModifier(float);
    void setIsLayingEgg(bool);
    void setIsPregnant(bool);
    void setJumpVelRedux(bool);
    void setJumping(bool);
    void setMovementComponentCurrentSpeed(float);
    void setNaturallySpawned(bool);
    void setPassengerLockedBodyRot(float);
    void setPassengerRotLimit(float);
    void setRolling(bool);
    void setSpawnMethod(enum MobSpawnMethod);
    void setSpeedModifier(float);
    void setSurfaceMob(bool);
    void setSwimSpeedMultiplier(float);
    void setTargetCaptain(struct ActorUniqueID);
    void setXxa(float);
    void setYRotA(float);
    void setYya(float);
    void setZza(float);
    void snapToYBodyRot(float);
    void snapToYHeadRot(float);
    static int const ARMOR_DAMAGE_DIVISOR;
    static float const ARMOR_PROTECTION_DIVIDER;
    static float const ASCEND_BLOCK_BY_JUMPING_SPEED;
    static float const BASE_ARMOR_TOUGHNESS;
    static float const DEFAULT_GRAVITY;
    static float const FRICTION_CONSTANT;
    static float const FRICTION_CONSTANT_MODIFIED;
    static float const FRICTION_MODIFIER;
    static float const GLIDING_FALL_RESET_DELTA;
    static float const LADDER_CLIMB_SPEED;
    static float const MAX_ARMOR;
    static float const MIN_ARMOR_RATIO;
    static float const NUM_ARMOR_ITEMS;
    static float const PLAYER_SWIMMING_SURFACE_OFFSET;
    static int const REMOVE_PASSENGERS_DELAY;
    static float const SLOW_FALL_GRAVITY;
    static int const SPAWN_XP_DELAY;
    static int const TOTAL_ROLL_STEPS;
    static void _aiStep(struct IMobMovementProxy &);
    static float _calcMoveRelativeSpeed(struct IMobMovementProxy &, enum TravelType);
    static void _travel(struct IMobMovementProxy &, float, float, float);
    static void _updateMobTravel(struct IMobMovementProxy &);
    static float calculateJumpImpulse(struct IMobMovementProxy const &);
    static float getJumpEffectAmplifierValue(struct IMobMovementProxy const &);
    static struct JumpPreventionResult getJumpPrevention(struct IMobMovementProxy const &);
    static enum TravelType getTravelType(struct IMobMovementProxy &);
    static bool isImmobile(struct IActorMovementProxy const &);
    static bool shouldApplyWaterGravity(struct IActorMovementProxy const &);
    static class Mob *tryGetFromEntity(class EntityContext &, bool);

   protected:
    void _doSprintParticleEffect();
    void _registerMobAttributes();
    int getCurrentSwingDuration();
    void processSoulSpeed();
    std::unique_ptr<class ListTag> saveOffhand() const;
    void tickEffects();
    void updateAttackAnim();
    bool updateGlidingDurability();
    static int const MAX_INACTIVITY_TIMER;
    static void _jumpFromGround(struct IMobMovementProxy &);

   private:
    bool _initHardCodedComponents();
    void _initialize(class EntityContext &);
    void _updateSprintingState();
    void _verifyAttributes();
    static bool _tryApplyingLevitation(struct IMobMovementProxy const &, class Vec3 &);
};